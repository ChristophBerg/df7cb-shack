#!/usr/bin/python3
'''
Use a Hercules DJ - DJControl Compact MIDI device with SDRangel

Listens on a TCP port for SDRangel reverse API requests.
'''

import Hamlib
import mido
import requests
import time
import threading
import argparse
from flask import Flask
from flask import request, jsonify

SDRANGEL_API_ADDR = None
SDRANGEL_API_PORT = 8091

sdrangel_ip = '127.0.0.1'
rx_device = 0
rx_channel_index = 0
tx_device = 1
tx_channel_index = 0
base_url = f'http://{sdrangel_ip}:{SDRANGEL_API_PORT}/sdrangel'
rx_url = [
        base_url + f'/deviceset/{rx_device}/channel/0/settings',
        base_url + f'/deviceset/{rx_device}/channel/1/settings',
        base_url + f'/deviceset/{rx_device}/channel/2/settings',
        ]
tx0_url = base_url + f'/deviceset/{tx_device}/channel/0/settings'

MIDI_PRESS = 127
MIDI_RELEASE = 0

MIDI_CUE_KP1_A = 1
MIDI_CUE_KP2_A = 2
MIDI_CUE_KP3_A = 3
MIDI_CUE_KP4_A = 4
MIDI_REC = 43
#MIDI_SCRATCH = 45
MIDI_JOG_B = 49
MIDI_CUE_KP1_B = 49
MIDI_CUE_KP2_B = 50
MIDI_CUE_KP3_B = 51
MIDI_CUE_KP4_B = 52
MIDI_VOL_B = 61
MIDI_TREB_B = 63
MIDI_BASS_B = 64
MIDI_PLAY_B = 81
MIDI_CUE_B = 82
MIDI_SYNC_B = 83
MIDI_READ_ALL = 0x7f

AUDIO_USB_OUTPUT= 'alsa_output.usb-GeneralPlus_USB_Audio_Device-00.analog-stereo'
AUDIO_USB_INPUT = 'alsa_input.usb-GeneralPlus_USB_Audio_Device-00.mono-fallback'

Hamlib.rig_set_debug(Hamlib.RIG_DEBUG_NONE)
my_rig = Hamlib.Rig(Hamlib.RIG_MODEL_NETRIGCTL)
midiport = None
settings = {}
app = Flask(__name__)

# ======================================================================
def getInputOptions():
    """ This is the argument line parser """
# ----------------------------------------------------------------------
    parser = argparse.ArgumentParser(description="Manages PTT from an SDRangel instance automatically")
    parser.add_argument("-A", "--address", dest="addr", help="listening address (default 0.0.0.0)", metavar="IP", type=str)
    parser.add_argument("-P", "--port", dest="port", help="listening port (default 8888)", metavar="PORT", type=int)
    parser.add_argument("-a", "--address-sdr", dest="sdrangel_address", help="SDRangel REST API address (defaults to calling address)", metavar="ADDRESS", type=str)
    parser.add_argument("-p", "--port-sdr", dest="sdrangel_port", help="SDRangel REST API port (default 8091)", metavar="PORT", type=int)

    options = parser.parse_args()

    if options.addr == None:
        options.addr = "0.0.0.0"
    if options.port == None:
        options.port = 8888
    if options.sdrangel_port == None:
        options.sdrangel_port = 8091

    return options.addr, options.port, options.sdrangel_address, options.sdrangel_port

# ======================================================================
def get_sdrangel_ip(request):
    """ Extract originator address from request """
# ----------------------------------------------------------------------
    if SDRANGEL_API_ADDR is not None:
        return SDRANGEL_API_ADDR
    if request.environ.get('HTTP_X_FORWARDED_FOR') is None:
        return request.environ['REMOTE_ADDR']
    else:
        return request.environ['HTTP_X_FORWARDED_FOR']

# ======================================================================
def gen_dict_extract(key, var):
    """ Gets a key value in a dictionnary or sub-dictionnary structure """
# ----------------------------------------------------------------------
    if hasattr(var,'items'):
        for k, v in var.items():
            if k == key:
                return v
            if isinstance(v, dict):
                return gen_dict_extract(key, v)

## ======================================================================
#def update_frequency_setting(request_content, frequency_key, frequency):
#    """ Finds the channel settings key that contains the inputFrequencyOffset key
#        and replace it with a single inputFrequencyOffset key with new frequency
#    """
## ----------------------------------------------------------------------
#    for k in request_content:
#        setting_item = request_content[k]
#        if isinstance(setting_item, dict):
#            if frequency_key in setting_item:
#                setting_item.update({
#                    frequency_key: frequency
#                })

def patch_tx(content):
    requests.patch(url=tx0_url, json={'SSBModSettings': content,
        'channelType': 'SSBMod',
        'direction': 1,
        'originatorDeviceSetIndex': 1,
        'originatorChannelIndex': 0,
        })

def patch_rx(rx_channel_index, content):
    requests.patch(url=rx_url[rx_channel_index], json={
        'SSBDemodSettings': content,
        'channelType': 'SSBDemod',
        'direction': 0,
        'originatorDeviceSetIndex': 0,
        'originatorChannelIndex': 0,
        })

# ======================================================================
@app.route('/sdrangel/deviceset/<int:deviceset_index>/channel/<int:channel_index>/settings', methods=['GET', 'PATCH', 'PUT'])
def channel_settings(deviceset_index, channel_index):
    """ Receiving channel settings from reverse API """
# ----------------------------------------------------------------------
    content = request.get_json(silent=True)
    print('Reverse API request:', content)
    # {'channelType': 'SSBMod', 'direction': 1, 'originatorChannelIndex': 0, 'originatorDeviceSetIndex': 1}
    # {'SSBModSettings': {'modAFInput': 1}, 'channelType': 'SSBMod', 'direction': 1, 'originatorChannelIndex': 0, 'originatorDeviceSetIndex': 1}
    # {'SSBDemodSettings': {'inputFrequencyOffset': -243998}, 'channelType': 'SSBDemod', 'direction': 0, 'originatorChannelIndex': 0, 'originatorDeviceSetIndex': 0}

    # reverse API requests seem to all go to 0,0, use channel values from inside json
    deviceset_index = content['originatorDeviceSetIndex']
    channel_index = content['originatorChannelIndex']

    # store settings
    #if (deviceset_index, channel_index) not in settings:
    #    settings[deviceset_index, channel_index] = {}
    if 'SSBDemodSettings' in content:
        new_settings = content['SSBDemodSettings']
        settings[deviceset_index, channel_index]['SSBDemodSettings'] |= new_settings

        if 'inputFrequencyOffset' in new_settings:
            freq = new_settings['inputFrequencyOffset']
            if settings['sync_b']:
                patch_tx({'inputFrequencyOffset': freq})

    elif 'SSBModSettings' in content:
        new_settings = content['SSBModSettings']
        settings[deviceset_index, channel_index]['SSBModSettings'] |= new_settings

        if 'inputFrequencyOffset' in new_settings:
            freq = new_settings['inputFrequencyOffset']
            my_rig.set_freq(Hamlib.RIG_VFO_A, 2400250000 + freq)

        if 'modAFInput' in content['SSBModSettings']:
            if new_settings['modAFInput'] == 0: # off
                midiport.send(mido.Message('note_on', note=MIDI_REC, velocity=MIDI_RELEASE))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_B, velocity=MIDI_RELEASE))
                midiport.send(mido.Message('note_on', note=MIDI_PLAY_B, velocity=MIDI_RELEASE))
            elif new_settings['modAFInput'] == 1: # CW carrier
                midiport.send(mido.Message('note_on', note=MIDI_REC, velocity=MIDI_PRESS))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_B, velocity=MIDI_PRESS))
                midiport.send(mido.Message('note_on', note=MIDI_PLAY_B, velocity=MIDI_RELEASE))
            elif new_settings['modAFInput'] == 3: # SSB
                midiport.send(mido.Message('note_on', note=MIDI_REC, velocity=MIDI_PRESS))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_B, velocity=MIDI_RELEASE))
                v = MIDI_PRESS if settings[tx_device, tx_channel_index]['SSBModSettings']['audioDeviceName'] == AUDIO_USB_INPUT else MIDI_RELEASE
                midiport.send(mido.Message('note_on', note=MIDI_PLAY_B, velocity=v))

    #print('Updated settings:', deviceset_index, channel_index, settings[deviceset_index, channel_index])

    #freq = gen_dict_extract('inputFrequencyOffset', content)
    #if freq is None:
    #    return "Could not extract RX frequency from request"
    #print("Tuning to", freq)

    #sdrangel_ip = get_sdrangel_ip(request)
    #channel_type = content.get('channelType')

    #base_url = f'http://{sdrangel_ip}:{SDRANGEL_API_PORT}/sdrangel'
    #tracker_device_index = 1
    #tracker_channel_index = 0
    ##r = requests.get(url=base_url + f'/deviceset/{tracker_device_index}/channel/{tracker_channel_index}/settings')
    ##if r.status_code // 100 != 2:
    ##    return "Could not query TX channel"
    ##c = r.json()
    ##update_frequency_setting(c, 'inputFrequencyOffset', freq)

    #tx_patch = {'SSBModSettings': {'inputFrequencyOffset': freq}, 'channelType': 'SSBMod', 'direction': 1}

    #r = requests.patch(url=base_url + f'/deviceset/{tracker_device_index}/channel/{tracker_channel_index}/settings', json=tx_patch)
    #if r.status_code // 100 != 2:
    #    print(f'SDRangel::adjust_xvtr: {sdrangel_ip}:{SDRANGEL_API_PORT} tracker [{tracker_device_index}:{tracker_channel_index}] adjust failed')

    #my_rig.set_freq(Hamlib.RIG_VFO_A, 2400250000 + freq)

    return "OK processed "

def midiloop():
    global midiport
    global rx_channel_index
    print('midiloop starting')
    #midiport.send(mido.Message('control_change', control=MIDI_READ_ALL, value=0x00)) # read all MIDI settings

    midiport.send(mido.Message('note_on', note=MIDI_CUE_KP1_B, velocity=MIDI_PRESS))
    midiport.send(mido.Message('note_on', note=MIDI_CUE_KP2_B, velocity=MIDI_RELEASE))
    midiport.send(mido.Message('note_on', note=MIDI_CUE_KP3_B, velocity=MIDI_RELEASE))
    midiport.send(mido.Message('note_on', note=MIDI_SYNC_B, velocity=MIDI_PRESS))
    settings['sync_b'] = True
    last_tick_b = 0

    while True:
        freq_step = 0

        # block waiting for the first message, and then read everything pending
        msgs = [midiport.receive()]
        for msg in midiport.iter_pending():
            msgs.append(msg)

        # process messages read
        for msg in msgs:
            print('MIDI:', msg) #, msg.bytes())

            if msg.type == 'control_change' and msg.control == MIDI_JOG_B:
                tick = msg.value
                if tick > 64: tick -= 128
                # remove hysteresis on changing direction
                if last_tick_b < 0 and tick == 2:
                    tick = 1
                elif last_tick_b > 0 and tick == -2:
                    tick = -1
                last_tick_b = tick
                freq_step += tick

            elif msg.type == 'note_on' and msg.note == MIDI_REC and msg.velocity == MIDI_PRESS:
                #print(settings)
                print("REC pressed")
                if settings[tx_device, tx_channel_index]['SSBModSettings']['modAFInput'] == 0:
                    patch_tx({'modAFInput': 3})
                else:
                    patch_tx({'modAFInput': 0})

            elif msg.type == 'note_on' and msg.note == MIDI_PLAY_B and msg.velocity == MIDI_PRESS:
                patch_tx({'audioDeviceName': AUDIO_USB_INPUT})
                if settings[tx_device, tx_channel_index]['SSBModSettings']['modAFInput'] == 0:
                    patch_tx({'modAFInput': 3})
                else:
                    patch_tx({'modAFInput': 0})

            elif msg.type == 'note_on' and msg.note == MIDI_CUE_KP1_A and msg.velocity == MIDI_PRESS:
                patch_rx(rx_channel_index, {'audioDeviceName': 'System default device'})
            elif msg.type == 'note_on' and msg.note == MIDI_CUE_KP2_A and msg.velocity == MIDI_PRESS:
                patch_rx(rx_channel_index, {'audioDeviceName': AUDIO_USB_OUTPUT})

            elif msg.type == 'note_on' and msg.note in (MIDI_CUE_KP1_B, MIDI_CUE_KP2_B, MIDI_CUE_KP3_B) and msg.velocity == MIDI_PRESS:
                rx_channel_index = msg.note - MIDI_CUE_KP1_B
                print('Switching to RX channel', rx_channel_index)
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP1_B, velocity=MIDI_RELEASE))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP2_B, velocity=MIDI_RELEASE))
                midiport.send(mido.Message('note_on', note=MIDI_CUE_KP3_B, velocity=MIDI_RELEASE))
                midiport.send(mido.Message('note_on', note=msg.note, velocity=MIDI_PRESS))
                if settings['sync_b']:
                    tx = settings[rx_device, rx_channel_index]['SSBDemodSettings']['inputFrequencyOffset']
                    patch_tx({'inputFrequencyOffset': tx})

            elif msg.type == 'note_on' and msg.note == MIDI_CUE_B:
                if msg.velocity == MIDI_PRESS:
                    patch_tx({'modAFInput': 1}) # CW carrier
                else:
                    patch_tx({'modAFInput': 0})

            elif msg.type == 'note_on' and msg.note == MIDI_SYNC_B and msg.velocity == MIDI_PRESS:
                settings['sync_b'] = not settings['sync_b']
                if settings['sync_b']:
                    midiport.send(mido.Message('note_on', note=MIDI_SYNC_B, velocity=MIDI_PRESS))
                    tx = settings[rx_device, rx_channel_index]['SSBDemodSettings']['inputFrequencyOffset']
                    patch_tx({'inputFrequencyOffset': tx})
                else:
                    midiport.send(mido.Message('note_on', note=MIDI_SYNC_B, velocity=MIDI_RELEASE))

            elif msg.type == 'control_change' and msg.control == MIDI_VOL_B:
                vol = 10.0 * (msg.value / 127.0)**2
                patch_rx(rx_channel_index, {'volume': vol})
            elif msg.type == 'control_change' and msg.control == MIDI_BASS_B:
                low = 20 * msg.value
                patch_rx(rx_channel_index, {'lowCutoff': low})
            elif msg.type == 'control_change' and msg.control == MIDI_TREB_B:
                high = 3000 - 20 * (127-msg.value)
                patch_rx(rx_channel_index, {'rfBandwidth': high})

        if freq_step != 0:
            scaled_freq_step = 10 * (-1)**(freq_step < 0) * int(abs(freq_step)**1.7)
            print('Updating freq:', freq_step, scaled_freq_step)
            qrg = settings[rx_device, rx_channel_index]['SSBDemodSettings']['inputFrequencyOffset'] + scaled_freq_step
            patch_rx(rx_channel_index, {'inputFrequencyOffset': qrg})

            # ... now sleep a bit so we aren't sending too many frequency changes at once
            time.sleep(0.1)

# ======================================================================
def main():
    """ This is the main routine """
# ----------------------------------------------------------------------
    my_rig.set_conf("rig_pathname", "localhost:4534")
    my_rig.open()

    global SDRANGEL_API_ADDR
    global SDRANGEL_API_PORT
    addr, port, SDRANGEL_API_ADDR, SDRANGEL_API_PORT = getInputOptions()
    sdrangel_ip = '127.0.0.1'

    for rx_channel_index in range(3):
        rx_status = requests.get(url=rx_url[rx_channel_index])
        if rx_status.status_code // 100 != 2:
            print('Failed to request', rx_url[rx_channel_index])
        print('Initial RX status:', rx_status.json())
        settings[rx_device, rx_channel_index] = rx_status.json()

    tx_status = requests.get(url=tx0_url)
    if tx_status.status_code // 100 != 2:
        print('Failed to request', tx0_url)
    print('Initial TX status:', tx_status.json())
    settings[tx_device, tx_channel_index] = tx_status.json()

    global midiport
    midiport = mido.open_ioport('DJControl Compact MIDI 1')
    threading.Thread(target=midiloop, daemon=True).start()

    print(f'main: starting at: {addr}:{port}')
    app.run(debug=True, host=addr, port=port, use_reloader=False)


# ======================================================================
if __name__ == "__main__":
    """ When called from command line... """
# ----------------------------------------------------------------------
    main()
