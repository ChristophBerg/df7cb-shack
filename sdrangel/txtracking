#!/usr/bin/env python3
'''
Frequency tracker: Keep TX offset in sync with RX offset

Listens on a TCP port for SDRangel reverse API requests.
'''

import requests
import time
import argparse
from flask import Flask
from flask import request, jsonify

SDRANGEL_API_ADDR = None
SDRANGEL_API_PORT = 8091

app = Flask(__name__)

# ======================================================================
def getInputOptions():
    """ This is the argument line parser """
# ----------------------------------------------------------------------
    parser = argparse.ArgumentParser(description="Manages PTT from an SDRangel instance automatically")
    parser.add_argument("-A", "--address", dest="addr", help="listening address (default 0.0.0.0)", metavar="IP", type=str)
    parser.add_argument("-P", "--port", dest="port", help="listening port (default 8888)", metavar="PORT", type=int)
    parser.add_argument("-a", "--address-sdr", dest="sdrangel_address", help="SDRangel REST API address (defaults to calling address)", metavar="ADDRESS", type=str)
    parser.add_argument("-p", "--port-sdr", dest="sdrangel_port", help="SDRangel REST API port (default 8091)", metavar="PORT", type=int)

    options = parser.parse_args()

    if options.addr == None:
        options.addr = "0.0.0.0"
    if options.port == None:
        options.port = 8888
    if options.sdrangel_port == None:
        options.sdrangel_port = 8091

    return options.addr, options.port, options.sdrangel_address, options.sdrangel_port

# ======================================================================
def get_sdrangel_ip(request):
    """ Extract originator address from request """
# ----------------------------------------------------------------------
    if SDRANGEL_API_ADDR is not None:
        return SDRANGEL_API_ADDR
    if request.environ.get('HTTP_X_FORWARDED_FOR') is None:
        return request.environ['REMOTE_ADDR']
    else:
        return request.environ['HTTP_X_FORWARDED_FOR']

# ======================================================================
def gen_dict_extract(key, var):
    """ Gets a key value in a dictionnary or sub-dictionnary structure """
# ----------------------------------------------------------------------
    if hasattr(var,'items'):
        for k, v in var.items():
            if k == key:
                return v
            if isinstance(v, dict):
                return gen_dict_extract(key, v)

# ======================================================================
def update_frequency_setting(request_content, frequency_key, frequency):
    """ Finds the channel settings key that contains the inputFrequencyOffset key
        and replace it with a single inputFrequencyOffset key with new frequency
    """
# ----------------------------------------------------------------------
    for k in request_content:
        setting_item = request_content[k]
        if isinstance(setting_item, dict):
            if frequency_key in setting_item:
                setting_item.update({
                    frequency_key: frequency
                })

# ======================================================================
@app.route('/sdrangel')
def hello_sdrangel():
    """ Just to test if it works """
# ----------------------------------------------------------------------
    sdrangel_ip = get_sdrangel_ip(request)
    print(f'SDRangel IP: {sdrangel_ip}')
    return 'Hello, SDRangel!'


# ======================================================================
@app.route('/sdrangel/deviceset/<int:deviceset_index>/channel/<int:channel_index>/settings', methods=['GET', 'PATCH', 'PUT'])
def channel_settings(deviceset_index, channel_index):
    """ Receiving channel settings from reverse API """
# ----------------------------------------------------------------------
    content = request.get_json(silent=True)
    freq = gen_dict_extract('inputFrequencyOffset', content)
    if freq is None:
        return "Could not extract RX frequency from request"
    print("Tuning to", freq)

    if content:
        orig_device_index = content.get('originatorDeviceSetIndex')
        orig_channel_index = content.get('originatorChannelIndex')
    if orig_device_index is None or orig_channel_index is None:
        print('device_settings: SDRangel reverse API v4.5.2 or higher required. No or invalid originator information')
        return "SDRangel reverse API v4.5.2 or higher required "
    sdrangel_ip = get_sdrangel_ip(request)
    channel_type = content.get('channelType')

    base_url = f'http://{sdrangel_ip}:{SDRANGEL_API_PORT}/sdrangel'
    tracker_device_index = 1
    tracker_channel_index = 0
    r = requests.get(url=base_url + f'/deviceset/{tracker_device_index}/channel/{tracker_channel_index}/settings')
    if r.status_code // 100 != 2:
        return "Could not query TX channel"
    c = r.json()
    update_frequency_setting(c, 'inputFrequencyOffset', freq)

    r = requests.patch(url=base_url + f'/deviceset/{tracker_device_index}/channel/{tracker_channel_index}/settings', json=c)
    if r.status_code // 100 != 2:
        print(f'SDRangel::adjust_xvtr: {sdrangel_ip}:{SDRANGEL_API_PORT} tracker [{tracker_device_index}:{tracker_channel_index}] adjust failed')

    return "OK processed "


# ======================================================================
def main():
    """ This is the main routine """
# ----------------------------------------------------------------------
    global SDRANGEL_API_ADDR
    global SDRANGEL_API_PORT
    addr, port, SDRANGEL_API_ADDR, SDRANGEL_API_PORT = getInputOptions()
    print(f'main: starting at: {addr}:{port}')
    app.run(debug=True, host=addr, port=port)


# ======================================================================
if __name__ == "__main__":
    """ When called from command line... """
# ----------------------------------------------------------------------
    main()
